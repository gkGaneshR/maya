/*
Copyright 2017 The OpenEBS Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/openebs/maya/pkg/apis/openebs.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CstorCrdLister helps list CstorCrds.
type CstorCrdLister interface {
	// List lists all CstorCrds in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CstorCrd, err error)
	// CstorCrds returns an object that can list and get CstorCrds.
	CstorCrds(namespace string) CstorCrdNamespaceLister
	CstorCrdListerExpansion
}

// cstorCrdLister implements the CstorCrdLister interface.
type cstorCrdLister struct {
	indexer cache.Indexer
}

// NewCstorCrdLister returns a new CstorCrdLister.
func NewCstorCrdLister(indexer cache.Indexer) CstorCrdLister {
	return &cstorCrdLister{indexer: indexer}
}

// List lists all CstorCrds in the indexer.
func (s *cstorCrdLister) List(selector labels.Selector) (ret []*v1alpha1.CstorCrd, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CstorCrd))
	})
	return ret, err
}

// CstorCrds returns an object that can list and get CstorCrds.
func (s *cstorCrdLister) CstorCrds(namespace string) CstorCrdNamespaceLister {
	return cstorCrdNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CstorCrdNamespaceLister helps list and get CstorCrds.
type CstorCrdNamespaceLister interface {
	// List lists all CstorCrds in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CstorCrd, err error)
	// Get retrieves the CstorCrd from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CstorCrd, error)
	CstorCrdNamespaceListerExpansion
}

// cstorCrdNamespaceLister implements the CstorCrdNamespaceLister
// interface.
type cstorCrdNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CstorCrds in the indexer for a given namespace.
func (s cstorCrdNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CstorCrd, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CstorCrd))
	})
	return ret, err
}

// Get retrieves the CstorCrd from the indexer for a given namespace and name.
func (s cstorCrdNamespaceLister) Get(name string) (*v1alpha1.CstorCrd, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cstorcrd"), name)
	}
	return obj.(*v1alpha1.CstorCrd), nil
}
